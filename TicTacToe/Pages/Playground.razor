@page "/playground"
@inject IRivalService rival;
@inject IGameService gameService;

<head>
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@700&display=swap" rel="stylesheet">
</head>

<body>
    <h2>
        @Winner
    </h2>
    <div class="wrapper">
        <div class="container">
            <button class="button-option" @onclick="@(() => BtnOnClick(0))">@Field[0]</button>
            <button class="button-option" @onclick="@(() => BtnOnClick(1))">@Field[1]</button>
            <button class="button-option" @onclick="@(() => BtnOnClick(2))">@Field[2]</button>
            <button class="button-option" @onclick="@(() => BtnOnClick(3))">@Field[3]</button>
            <button class="button-option" @onclick="@(() => BtnOnClick(4))">@Field[4]</button>
            <button class="button-option" @onclick="@(() => BtnOnClick(5))">@Field[5]</button>
            <button class="button-option" @onclick="@(() => BtnOnClick(6))">@Field[6]</button>
            <button class="button-option" @onclick="@(() => BtnOnClick(7))">@Field[7]</button>
            <button class="button-option" @onclick="@(() => BtnOnClick(8))">@Field[8]</button>
        </div>
        <button id="restart" @onclick="Restart">Restart</button>
    </div>
    <div>
    </div>
    <div class="popup hide">
        <p id="message">Sample Message</p>
        <button id="new-game">New Game</button>
    </div>
</body>

@code {
    private Dictionary<int, char> Field { get; set; }
    private string Winner { get; set; } = "";
    private GameStatus CurrentGameStatus { get; set; } = GameStatus.Continues;

    public enum GameStatus { Continues, Ended }

    protected override Task OnInitializedAsync()
    {
        SetField();

        return base.OnInitializedAsync();
    }

    private void BtnOnClick(int index)
    {
        if (Field is null) throw new NullReferenceException("Field is null exception");

        var tmpFields = new Dictionary<int, char>(Field);

        if (Field[index] == ' ' && CurrentGameStatus == GameStatus.Continues) Field[index] = 'X';
        CheckWinner();

        if (CurrentGameStatus == GameStatus.Continues &
            (Field.Where(x => x.Value == 'X').Count() > Field.Where(x => x.Value == 'O').Count())) rival.MakeMove(Field);
        CheckWinner();
    }

    private void CheckWinner()
    {
        var result = gameService.HwoIsWinner(Field, "Player", "Computer");

        if (result == "Player" || result == "Computer" || rival.CountEmptyFields(Field) == 0) 
        { 
            CurrentGameStatus = GameStatus.Ended;
            Winner = "Winner - " + result;
        }
    }

    private void Restart()
    {
        SetField();
        Winner = "";
        CurrentGameStatus = GameStatus.Continues;
    }

    private void SetField()
    {
        Field = new Dictionary<int, char>();

        for (int i = 0; i < 9; i++)
        {
            Field.Add(i, ' ');
        }
    }
}
